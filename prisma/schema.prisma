generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  name          String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  email         String           @unique
  phoneNumber   String?
  expensesPaid  Expense[]        @relation("PaidBy")
  groupMembers  GroupMember[]
  createdGroups Group[]          @relation("GroupCreator")
  settlementsFrom Settlement[]   @relation("SettlementFrom")
  settlementsTo   Settlement[]   @relation("SettlementTo")
  simplifiedFrom SimplifiedSettlement[] @relation("SimplifiedFrom")
  simplifiedTo   SimplifiedSettlement[] @relation("SimplifiedTo")
  expenseShares  ExpenseShare[]
}

model Group {
  id              Int              @id @default(autoincrement())
  name            String
  desc            String
  totalExpenses   Float            @default(0)
  createdBy       User             @relation("GroupCreator", fields: [createdById], references: [id])
  createdById     Int
  members         GroupMember[]
  expenses        Expense[]
  settlements     Settlement[]
  simplifiedSettlements SimplifiedSettlement[]
}

model GroupMember {
  id        Int    @id @default(autoincrement())
  group     Group  @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
}

model Expense {
  id                Int       @id @default(autoincrement())
  desc              String
  totalAmount       BigInt
  paidBy            User      @relation("PaidBy", fields: [paidById], references: [id])
  paidById          Int
  group             Group     @relation(fields: [groupId], references: [id])
  groupId           Int
  versionNum        Int       @default(1)
  isActive          Boolean   @default(true)

  originalExpense     Expense?   @relation("ExpenseVersion", fields: [originalExpenseId], references: [id])
  originalExpenseId   Int?
  editedVersions      Expense[]  @relation("ExpenseVersion")

  expenseShares       ExpenseShare[]   @relation("ExpenseToShares")  // ✅ Add this
}

model ExpenseShare {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  expense         Expense  @relation("ExpenseToShares", fields: [expenseId], references: [id])  // ✅ Name the relation
  expenseId       Int
  sharePercentage Int
}

model Settlement {
  id        Int    @id @default(autoincrement())
  group     Group  @relation(fields: [groupId], references: [id])
  groupId   Int
  fromUser  User   @relation("SettlementFrom", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser    User   @relation("SettlementTo", fields: [toUserId], references: [id])
  toUserId   Int
  amountPaid Int
  settledAt  DateTime
  createdAt  DateTime @default(now())
}

model SimplifiedSettlement {
  id        Int    @id @default(autoincrement())
  group     Group  @relation(fields: [groupId], references: [id])
  groupId   Int
  fromUser  User   @relation("SimplifiedFrom", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser    User   @relation("SimplifiedTo", fields: [toUserId], references: [id])
  toUserId   Int
  amount     Decimal
  calculatedAt DateTime
}